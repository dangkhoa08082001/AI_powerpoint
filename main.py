# main_app.py
"""
Main Streamlit application - ·ª®ng d·ª•ng ch√≠nh ƒë·ªÉ t·∫°o PowerPoint v·ªõi AI
Enhanced version v·ªõi interactive features, auto image generation v√† smart theming
"""

import streamlit as st
import json
from datetime import datetime
from io import BytesIO
import logging
import traceback

# Import custom modules
from powerpoint_generator import PowerPointGenerator
from ai_content_generator import EnhancedAIContentGenerator
from dalle_generator import DALLEImageGenerator
from theme_system import ModernThemeSystem
from powerpoint_editor_module import PowerPointEditorModule

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Page config
st.set_page_config(
    page_title="üéì Enhanced AI PowerPoint Generator",
    page_icon="üéì",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS v·ªõi enhanced styles
st.markdown("""
<style>
    .main-header {
        text-align: center;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        margin-bottom: 2rem;
    }
    
    .chat-message {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        border-left: 4px solid #667eea;
        color: #2c3e50 !important;
    }
    
    .chat-message strong {
        color: #667eea !important;
    }
    
    .ai-response {
        background-color: #e8f4fd;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        border-left: 4px solid #1f77b4;
        color: #2c3e50 !important;
    }
    
    .ai-response strong {
        color: #1f77b4 !important;
    }
    
    .interactive-question {
        background-color: #fff3cd;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        border-left: 4px solid #ffc107;
    }
    
    .slide-preview {
        border: 2px solid #ddd;
        border-radius: 8px;
        padding: 1rem;
        margin: 0.5rem 0;
        background-color: #fafafa;
    }
    
    .slide-title {
        color: #2E86AB;
        font-weight: bold;
        font-size: 1.2em;
        margin-bottom: 0.5rem;
    }
    
    .slide-content {
        margin-left: 1rem;
    }
    
    .progress-indicator {
        background-color: #e9ecef;
        border-radius: 10px;
        height: 20px;
        margin: 1rem 0;
    }
    
    .progress-bar {
        background: linear-gradient(90deg, #28a745 0%, #20c997 100%);
        height: 100%;
        border-radius: 10px;
        transition: width 0.3s ease;
    }
    
    .theme-preview {
        border: 2px solid #ddd;
        border-radius: 8px;
        padding: 10px;
        margin: 5px;
        text-align: center;
        cursor: pointer;
    }
    
    .theme-preview:hover {
        border-color: #007bff;
    }
    
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .error-box {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .feature-card {
        background: white;
        border-radius: 10px;
        padding: 1.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

class EnhancedPowerPointApp:
    """Enhanced main application class v·ªõi interactive features"""
    
    def __init__(self):
        self.init_session_state()
        self.theme_system = ModernThemeSystem()
        
    def init_session_state(self):
        """Initialize enhanced session state variables"""
        if 'conversation_history' not in st.session_state:
            st.session_state.conversation_history = []
        
        if 'current_presentation' not in st.session_state:
            st.session_state.current_presentation = None
        
        if 'ai_generator' not in st.session_state:
            st.session_state.ai_generator = None
        
        if 'pp_generator' not in st.session_state:
            st.session_state.pp_generator = PowerPointGenerator()
        
        if 'presentation_data' not in st.session_state:
            st.session_state.presentation_data = None
        
        if 'editing_mode' not in st.session_state:
            st.session_state.editing_mode = False
        
        if 'dalle_generator' not in st.session_state:
            st.session_state.dalle_generator = None
        
        if 'enable_dalle' not in st.session_state:
            st.session_state.enable_dalle = True
        
        if 'selected_theme' not in st.session_state:
            st.session_state.selected_theme = 'education_pro'
        
        # Enhanced session state for interactive features
        if 'interactive_session' not in st.session_state:
            st.session_state.interactive_session = None
        
        if 'current_questions' not in st.session_state:
            st.session_state.current_questions = []
        
        # Enhanced PowerPoint Editor
        if 'enhanced_editor' not in st.session_state:
            st.session_state.enhanced_editor = PowerPointEditorModule()
        
        if 'user_answers' not in st.session_state:
            st.session_state.user_answers = {}
        
        if 'generation_phase' not in st.session_state:
            st.session_state.generation_phase = 'initial'  # initial, questions, generation, complete
        
        if 'auto_theme_enabled' not in st.session_state:
            st.session_state.auto_theme_enabled = True
    
    def setup_sidebar(self):
        """Setup enhanced sidebar v·ªõi c√°c c√†i ƒë·∫∑t m·ªõi"""
        with st.sidebar:
            st.header("‚öôÔ∏è C√†i ƒë·∫∑t AI Enhanced")
            
            # OpenAI API Key
            api_key = st.text_input(
                "üîë OpenAI API Key",
                type="password",
                help="Nh·∫≠p API key ƒë·ªÉ s·ª≠ d·ª•ng ChatGPT v√† DALL-E"
            )
            
            if api_key:
                if st.session_state.ai_generator is None:
                    try:
                        with st.spinner("üîå ƒêang k·∫øt n·ªëi AI..."):
                            st.session_state.ai_generator = EnhancedAIContentGenerator(api_key)
                            st.session_state.dalle_generator = DALLEImageGenerator(api_key)
                        st.success("‚úÖ ƒê√£ k·∫øt n·ªëi AI Enhanced + DALL-E!")
                    except Exception as e:
                        st.error(f"‚ùå L·ªói k·∫øt n·ªëi AI: {str(e)}")
                        st.error("Ki·ªÉm tra l·∫°i API key ho·∫∑c th·ª≠ l·∫°i sau")
                else:
                    st.success("‚úÖ AI ƒë√£ k·∫øt n·ªëi s·∫µn s√†ng!")
            else:
                st.warning("‚ö†Ô∏è C·∫ßn API key ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng AI")
                st.session_state.ai_generator = None
            
            st.divider()
            
            # Enhanced AI settings
            st.subheader("ü§ñ C√†i ƒë·∫∑t AI Enhanced")
            model_choice = st.selectbox(
                "Model",
                ["gpt-3.5-turbo", "gpt-4"],
                help="Ch·ªçn model ChatGPT"
            )
            
            interactive_mode = st.checkbox(
                "üó£Ô∏è Ch·∫ø ƒë·ªô t∆∞∆°ng t√°c",
                value=True,
                help="AI s·∫Ω h·ªèi c√¢u h·ªèi ƒë·ªÉ hi·ªÉu r√µ nhu c·∫ßu"
            )
            
            # Enhanced DALL-E settings
            st.subheader("üé® C√†i ƒë·∫∑t DALL-E Enhanced")
            enable_dalle = st.checkbox(
                "üñºÔ∏è T·ª± ƒë·ªông t·∫°o ·∫£nh minh h·ªça", 
                value=True,
                help="AI s·∫Ω ph√¢n t√≠ch v√† t·∫°o ·∫£nh ph√π h·ª£p cho t·ª´ng slide"
            )
            
            image_quality = st.selectbox(
                "Ch·∫•t l∆∞·ª£ng ·∫£nh",
                ["standard", "hd"],
                help="Ch·∫•t l∆∞·ª£ng ·∫£nh DALL-E"
            )
            
            # Enhanced Theme settings
            st.subheader("üé® H·ªá th·ªëng Theme Th√¥ng minh")
            auto_theme = st.checkbox(
                "üéØ T·ª± ƒë·ªông ch·ªçn theme",
                value=True,
                help="AI s·∫Ω t·ª± ƒë·ªông ch·ªçn theme ph√π h·ª£p v·ªõi n·ªôi dung"
            )
            
            if not auto_theme:
                available_themes = self.theme_system.list_available_themes()
                selected_theme = st.selectbox(
                    "Template Theme",
                    options=list(available_themes.keys()),
                    format_func=lambda x: f"{available_themes[x]}",
                    help="Ch·ªçn theme th·ªß c√¥ng"
                )
                st.session_state.selected_theme = selected_theme
            
            st.session_state.auto_theme_enabled = auto_theme
            
            st.divider()
            
            # Enhanced Quick actions
            st.subheader("‚ö° Thao t√°c nhanh")
            
            if st.button("üîÑ Reset Session"):
                self.reset_interactive_session()
                st.success("ƒê√£ reset session!")
            
            if st.session_state.presentation_data:
                if st.button("üìä Xem th·ªëng k√™"):
                    self.show_presentation_stats()
            
            # Progress indicator
            if st.session_state.generation_phase != 'initial':
                self.render_progress_indicator()
    
    def render_header(self):
        """Render enhanced header"""
        st.markdown("""
        <div class="main-header">
            <h1>üéì Enhanced AI PowerPoint Generator</h1>
            <p>T·∫°o presentation th√¥ng minh v·ªõi AI t∆∞∆°ng t√°c, h√¨nh ·∫£nh t·ª± ƒë·ªông v√† theme th√¥ng minh</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Feature highlights
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown("""
            <div class="feature-card">
                <h4>üó£Ô∏è T∆∞∆°ng t√°c th√¥ng minh</h4>
                <p>AI h·ªèi c√¢u h·ªèi ƒë·ªÉ hi·ªÉu r√µ nhu c·∫ßu</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="feature-card">
                <h4>üé® T·∫°o ·∫£nh t·ª± ƒë·ªông</h4>
                <p>DALL-E t·∫°o ·∫£nh minh h·ªça ph√π h·ª£p</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown("""
            <div class="feature-card">
                <h4>üéØ Theme th√¥ng minh</h4>
                <p>T·ª± ƒë·ªông ch·ªçn theme ph√π h·ª£p</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            st.markdown("""
            <div class="feature-card">
                <h4>üìä Ph√¢n t√≠ch n·ªôi dung</h4>
                <p>AI ph√¢n t√≠ch v√† t·ªëi ∆∞u h√≥a slides</p>
            </div>
            """, unsafe_allow_html=True)
    
    def render_interactive_chat_interface(self):
        """Render enhanced interactive chat interface"""
        st.subheader("üí¨ Tr√≤ chuy·ªán v·ªõi AI Assistant")
        
        # Chat history
        if st.session_state.conversation_history:
            for message in st.session_state.conversation_history:
                if message["role"] == "user":
                    st.markdown(f"""
                    <div class="chat-message">
                        <strong>üë§ B·∫°n:</strong> {message["content"]}
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown(f"""
                    <div class="ai-response">
                        <strong>ü§ñ AI:</strong> {message["content"]}
                    </div>
                    """, unsafe_allow_html=True)
        
        # Current interactive questions
        if st.session_state.current_questions:
            self.render_interactive_questions()
        
        # Generation phase indicators
        if st.session_state.generation_phase == 'generation':
            st.markdown("""
            <div class="ai-response">
                <strong>ü§ñ AI:</strong> ƒêang t·∫°o presentation v·ªõi t·∫•t c·∫£ t√≠nh nƒÉng n√¢ng cao...
                <br>‚Ä¢ Ph√¢n t√≠ch n·ªôi dung cho h√¨nh ·∫£nh
                <br>‚Ä¢ T·ª± ƒë·ªông ch·ªçn theme ph√π h·ª£p  
                <br>‚Ä¢ T·∫°o icons v√† visual elements
                <br>‚Ä¢ Generate h√¨nh ·∫£nh DALL-E
            </div>
            """, unsafe_allow_html=True)
            
            # Auto generate presentation
            self.auto_generate_presentation()
        
        # Initialize user_input variable
        user_input = ""
        
        # User input
        if st.session_state.generation_phase in ['initial', 'complete']:
            user_input = st.text_area(
                "Nh·∫≠p y√™u c·∫ßu c·ªßa b·∫°n:",
                placeholder="VD: T·∫°o b√†i gi·∫£ng v·ªÅ Sinh h·ªçc l·ªõp 10 v·ªÅ c·∫•u tr√∫c t·∫ø b√†o...",
                height=100
            )
            
            col1, col2, col3 = st.columns([2, 1, 1])
            
            with col1:
                if st.button("üöÄ B·∫Øt ƒë·∫ßu t·∫°o presentation", type="primary"):
                    if user_input and st.session_state.ai_generator:
                        self.start_interactive_generation(user_input)
                    elif user_input:
                        st.warning("‚ö†Ô∏è C·∫ßn API key! Ho·∫∑c d√πng 'T·∫°o m·∫´u' b√™n d∆∞·ªõi.")
                    else:
                        st.warning("Vui l√≤ng nh·∫≠p y√™u c·∫ßu!")
            
            with col2:
                if st.button("üìù T·∫°o nhanh"):
                    if user_input and st.session_state.ai_generator:
                        self.quick_generate(user_input)
                    elif user_input:
                        st.warning("‚ö†Ô∏è C·∫ßn API key! Ho·∫∑c d√πng 'T·∫°o m·∫´u' b√™n d∆∞·ªõi.")
                    else:
                        st.warning("Vui l√≤ng nh·∫≠p y√™u c·∫ßu!")
            
            with col3:
                if st.button("üí° G·ª£i √Ω"):
                    self.show_suggestions()
            
            # Emergency fallback - t·∫°o presentation m·∫´u kh√¥ng c·∫ßn API
            if user_input and not st.session_state.ai_generator:
                st.markdown("---")
                st.markdown("#### üÜò Kh√¥ng c√≥ API key?")
                if st.button("üéØ T·∫°o presentation m·∫´u", help="T·∫°o m·∫´u d·ª±a tr√™n y√™u c·∫ßu, kh√¥ng c·∫ßn API"):
                    self.create_sample_presentation(user_input)
    
    def render_interactive_questions(self):
        """Render interactive questions interface"""
        st.markdown("""
        <div class="interactive-question">
            <h4>ü§ñ AI c·∫ßn th√™m th√¥ng tin:</h4>
        </div>
        """, unsafe_allow_html=True)
        
        current_answers = {}
        
        for i, question in enumerate(st.session_state.current_questions):
            question_text = question.get("question", "")
            question_type = question.get("type", "text")
            question_key = question.get("key", f"q_{i}")
            required = question.get("required", False)
            
            st.markdown(f"**{question_text}** {'*' if required else ''}")
            
            if question_type == "text":
                answer = st.text_input(
                    f"C√¢u tr·∫£ l·ªùi {i+1}:",
                    key=f"answer_{question_key}",
                    label_visibility="collapsed"
                )
                if answer:
                    current_answers[question_key] = answer
            
            elif question_type == "select":
                options = question.get("options", [])
                answer = st.selectbox(
                    f"Ch·ªçn {i+1}:",
                    options=[""] + options,
                    key=f"answer_{question_key}",
                    label_visibility="collapsed"
                )
                if answer:
                    current_answers[question_key] = answer
            
            elif question_type == "boolean":
                answer = st.checkbox(
                    "C√≥",
                    key=f"answer_{question_key}"
                )
                current_answers[question_key] = answer
        
        # Submit answers
        col1, col2 = st.columns([1, 3])
        
        with col1:
            if st.button("‚úÖ G·ª≠i c√¢u tr·∫£ l·ªùi"):
                self.process_interactive_answers(current_answers)
        
        with col2:
            if st.button("‚è≠Ô∏è B·ªè qua v√† t·∫°o ngay"):
                self.skip_questions_and_generate()
    
    def start_interactive_generation(self, user_input: str):
        """Start interactive generation process"""
        try:
            # Add to conversation history
            st.session_state.conversation_history.append({
                "role": "user",
                "content": user_input
            })
            
            # Check if AI generator is available
            if not st.session_state.ai_generator:
                st.error("‚ùå C·∫ßn nh·∫≠p API key tr∆∞·ªõc!")
                return
            
            # Add loading indicator
            with st.spinner("ü§ñ AI ƒëang ph√¢n t√≠ch y√™u c·∫ßu..."):
                # Start interactive session with timeout
                try:
                    response = st.session_state.ai_generator.start_interactive_session(user_input)
                except Exception as api_error:
                    st.error(f"‚ùå L·ªói API: {str(api_error)}")
                    st.info("üîÑ ƒêang chuy·ªÉn sang ch·∫ø ƒë·ªô t·∫°o nhanh...")
                    self.quick_generate(user_input)
                    return
            
            if response and response.get("type") == "interactive_questions":
                st.session_state.current_questions = response.get("questions", [])
                st.session_state.generation_phase = "questions"
                
                ai_message = response.get("message", "T√¥i c·∫ßn th√™m m·ªôt s·ªë th√¥ng tin ƒë·ªÉ t·∫°o presentation t·ªët nh·∫•t cho b·∫°n:")
                st.session_state.conversation_history.append({
                    "role": "assistant",
                    "content": ai_message
                })
                
                st.rerun()
            else:
                # Fallback to direct generation
                st.info("üîÑ Chuy·ªÉn sang t·∫°o nhanh...")
                self.quick_generate(user_input)
                
        except Exception as e:
            st.error(f"‚ùå L·ªói khi b·∫Øt ƒë·∫ßu: {str(e)}")
            st.info("üîÑ Th·ª≠ t·∫°o nhanh thay th·∫ø...")
            self.quick_generate(user_input)
    
    def process_interactive_answers(self, answers: dict):
        """Process user answers from interactive questions"""
        try:
            # Update user answers
            st.session_state.user_answers.update(answers)
            
            # Process with AI
            response = st.session_state.ai_generator.process_user_answers(answers)
            
            if response.get("type") == "follow_up_questions":
                # More questions needed
                st.session_state.current_questions = response.get("questions", [])
                
                ai_message = response.get("message", "")
                st.session_state.conversation_history.append({
                    "role": "assistant",
                    "content": ai_message
                })
                
                st.rerun()
                
            elif response.get("type") == "generation_ready":
                # Ready to generate
                st.session_state.current_questions = []
                st.session_state.generation_phase = "generation"
                
                ai_message = response.get("message", "")
                st.session_state.conversation_history.append({
                    "role": "assistant", 
                    "content": ai_message
                })
                
                st.rerun()
                
        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi: {str(e)}")
    
    def auto_generate_presentation(self):
        """Auto generate presentation with all enhanced features"""
        try:
            with st.spinner("üé® ƒêang t·∫°o presentation v·ªõi AI..."):
                # Generate enhanced presentation
                presentation_data = st.session_state.ai_generator.generate_enhanced_presentation()
                
                if presentation_data:
                    st.session_state.presentation_data = presentation_data
                    st.session_state.generation_phase = "complete"
                    
                    # Add success message
                    st.session_state.conversation_history.append({
                        "role": "assistant",
                        "content": f"‚úÖ ƒê√£ t·∫°o xong presentation '{presentation_data.get('title', '')}' v·ªõi {len(presentation_data.get('slides', []))} slides! H√£y chuy·ªÉn sang tab Preview ƒë·ªÉ xem k·∫øt qu·∫£."
                    })
                    
                    st.success("üéâ Presentation ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! Chuy·ªÉn sang tab 'Preview' ƒë·ªÉ xem.")
                    st.rerun()
                else:
                    st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o presentation")
                    
        except Exception as e:
            st.error(f"L·ªói khi t·∫°o presentation: {str(e)}")
            st.session_state.generation_phase = "complete"
    
    def quick_generate(self, user_input: str):
        """Quick generation without interactive questions"""
        try:
            with st.spinner("‚ö° T·∫°o nhanh presentation..."):
                # Use fallback context
                fallback_context = {
                    "answers_collected": {
                        "topic": user_input,
                        "audience": "H·ªçc sinh",
                        "duration": "45 ph√∫t",
                        "content_depth": "Trung b√¨nh",
                        "presentation_style": "Gi√°o d·ª•c - Th√¢n thi·ªán",
                        "include_examples": True,
                        "include_images": st.session_state.enable_dalle
                    }
                }
                
                presentation_data = st.session_state.ai_generator.generate_enhanced_presentation(fallback_context)
                
                if presentation_data:
                    st.session_state.presentation_data = presentation_data
                    st.session_state.generation_phase = "complete"
                    
                    st.success("‚ö° T·∫°o nhanh th√†nh c√¥ng! Chuy·ªÉn sang tab 'Preview' ƒë·ªÉ xem.")
                    st.rerun()
                    
        except Exception as e:
            st.error(f"L·ªói t·∫°o nhanh: {str(e)}")
    
    def skip_questions_and_generate(self):
        """Skip remaining questions and generate with current info"""
        st.session_state.current_questions = []
        st.session_state.generation_phase = "generation"
        st.rerun()
    
    def show_suggestions(self):
        """Show example suggestions"""
        suggestions = [
            "T·∫°o b√†i gi·∫£ng Sinh h·ªçc l·ªõp 10 v·ªÅ c·∫•u tr√∫c t·∫ø b√†o",
            "Presentation v·ªÅ Marketing Digital cho doanh nghi·ªáp",
            "B√†i thuy·∫øt tr√¨nh v·ªÅ Tr√≠ tu·ªá nh√¢n t·∫°o v√† Machine Learning",
            "Gi√°o √°n V·∫≠t l√Ω v·ªÅ s√≥ng √°nh s√°ng cho h·ªçc sinh THPT",
            "Training v·ªÅ K·ªπ nƒÉng giao ti·∫øp cho nh√¢n vi√™n"
        ]
        
        st.markdown("### üí° G·ª£i √Ω:")
        for suggestion in suggestions:
            if st.button(f"üìù {suggestion}", key=f"suggest_{suggestion[:20]}"):
                st.session_state.conversation_history.append({
                    "role": "user",
                    "content": suggestion
                })
                self.start_interactive_generation(suggestion)
    
    def create_sample_presentation(self, user_input: str):
        """Create sample presentation without API"""
        try:
            with st.spinner("üéØ ƒêang t·∫°o presentation m·∫´u..."):
                # Create basic presentation structure
                sample_data = {
                    "title": f"Presentation v·ªÅ {user_input[:50]}",
                    "subtitle": "ƒê∆∞·ª£c t·∫°o b·ªüi Enhanced AI PowerPoint Generator",
                    "author": "AI Assistant",
                    "template": "education",
                    "target_audience": "H·ªçc sinh/Nh√¢n vi√™n",
                    "estimated_duration": "30-45 ph√∫t",
                    "difficulty_level": "Trung b√¨nh",
                    "recommended_theme": {
                        "theme_name": "education_pro",
                        "auto_selected": False,
                        "reason": "Default theme for sample"
                    },
                    "image_suggestions": {
                        "total_slides": 4,
                        "slides_needing_images": [0, 1],
                        "image_concepts": {},
                        "priority_slides": []
                    },
                    "visual_elements": {
                        "primary_icon": "üìä",
                        "color_scheme": "professional",
                        "visual_style": "clean_modern"
                    },
                    "slides": [
                        {
                            "type": "content",
                            "title": "Gi·ªõi thi·ªáu ch·ªß ƒë·ªÅ",
                            "content": [
                                "T·ªïng quan v·ªÅ ch·ªß ƒë·ªÅ",
                                "M·ª•c ti√™u c·ªßa presentation",
                                "N·ªôi dung ch√≠nh s·∫Ω tr√¨nh b√†y"
                            ],
                            "icon": "üéØ",
                            "needs_image": False,
                            "estimated_time": "5 ph√∫t"
                        },
                        {
                            "type": "content", 
                            "title": "N·ªôi dung ch√≠nh",
                            "content": [
                                "ƒêi·ªÉm ch√≠nh th·ª© nh·∫•t",
                                "ƒêi·ªÉm ch√≠nh th·ª© hai", 
                                "ƒêi·ªÉm ch√≠nh th·ª© ba"
                            ],
                            "icon": "üìã",
                            "needs_image": True,
                            "image_concept": "Relevant illustration",
                            "estimated_time": "20 ph√∫t"
                        },
                        {
                            "type": "content",
                            "title": "V√≠ d·ª• v√† ·ª©ng d·ª•ng",
                            "content": [
                                "V√≠ d·ª• th·ª±c t·∫ø",
                                "·ª®ng d·ª•ng trong th·ª±c ti·ªÖn",
                                "Case study minh h·ªça"
                            ],
                            "icon": "üí°",
                            "needs_image": True,
                            "image_concept": "Example illustration",
                            "estimated_time": "15 ph√∫t"
                        },
                        {
                            "type": "content",
                            "title": "K·∫øt lu·∫≠n",
                            "content": [
                                "T√≥m t·∫Øt c√°c ƒëi·ªÉm ch√≠nh",
                                "K·∫øt lu·∫≠n v√† ƒë√°nh gi√°",
                                "C√¢u h·ªèi th·∫£o lu·∫≠n"
                            ],
                            "icon": "üèÜ",
                            "needs_image": False,
                            "estimated_time": "5 ph√∫t"
                        }
                    ],
                    "generation_info": {
                        "model_used": "template_based",
                        "generated_at": datetime.now().isoformat(),
                        "interactive_session": False,
                        "features_used": ["template_generation", "basic_structure"]
                    }
                }
                
                st.session_state.presentation_data = sample_data
                st.session_state.generation_phase = "complete"
                
                # Add to conversation
                st.session_state.conversation_history.append({
                    "role": "assistant",
                    "content": "‚úÖ ƒê√£ t·∫°o presentation m·∫´u th√†nh c√¥ng! ƒê√¢y l√† c·∫•u tr√∫c c∆° b·∫£n, b·∫°n c√≥ th·ªÉ t√πy ch·ªânh trong tab Preview v√† Download."
                })
                
                st.success("üéØ T·∫°o presentation m·∫´u th√†nh c√¥ng! Chuy·ªÉn sang tab 'Preview' ƒë·ªÉ xem.")
                st.rerun()
                
        except Exception as e:
            st.error(f"‚ùå L·ªói t·∫°o m·∫´u: {str(e)}")
    
    def render_enhanced_presentation_preview(self):
        """Render enhanced presentation preview"""
        if not st.session_state.presentation_data:
            return
        
        data = st.session_state.presentation_data
        
        st.subheader("üìã Preview Presentation")
        
        # Enhanced presentation info
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown(f"**üìå Ti√™u ƒë·ªÅ:** {data.get('title', '')}")
            st.markdown(f"**üìù Ph·ª• ƒë·ªÅ:** {data.get('subtitle', '')}")
            st.markdown(f"**üë• ƒê·ªëi t∆∞·ª£ng:** {data.get('target_audience', '')}")
            st.markdown(f"**‚è±Ô∏è Th·ªùi gian:** {data.get('estimated_duration', '')}")
            st.markdown(f"**üìä ƒê·ªô kh√≥:** {data.get('difficulty_level', '')}")
        
        with col2:
            # Theme info
            theme_info = data.get('recommended_theme', {})
            if theme_info:
                st.markdown(f"**üé® Theme:** {theme_info.get('theme_name', '')}")
                if theme_info.get('auto_selected'):
                    st.success("üéØ T·ª± ƒë·ªông ch·ªçn theme")
            
            # Image info  
            image_suggestions = data.get('image_suggestions', {})
            if image_suggestions:
                slides_with_images = len(image_suggestions.get('slides_needing_images', []))
                st.markdown(f"**üñºÔ∏è Slides c√≥ ·∫£nh:** {slides_with_images}")
        
        # Enhanced slide previews
        st.markdown("### üìë Slides Preview")
        
        slides = data.get('slides', [])
        for i, slide in enumerate(slides):
            with st.expander(f"Slide {i+1}: {slide.get('title', '')} {slide.get('icon', '')}"):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    content = slide.get('content', [])
                    if content:
                        for point in content:
                            st.markdown(f"‚Ä¢ {point}")
                    
                    # Two column content
                    left_content = slide.get('left_content', [])
                    right_content = slide.get('right_content', [])
                    if left_content or right_content:
                        lcol, rcol = st.columns(2)
                        with lcol:
                            for point in left_content:
                                st.markdown(f"‚Ä¢ {point}")
                        with rcol:
                            for point in right_content:
                                st.markdown(f"‚Ä¢ {point}")
                
                with col2:
                    st.markdown(f"**Lo·∫°i:** {slide.get('type', '')}")
                    st.markdown(f"**Icon:** {slide.get('icon', 'N/A')}")
                    
                    if slide.get('needs_image'):
                        st.success("üñºÔ∏è C√≥ ·∫£nh")
                        concept = slide.get('image_concept', '')
                        if concept:
                            st.caption(f"√ù t∆∞·ªüng: {concept}")
                    else:
                        st.info("üìù Ch·ªâ text")
                    
                    time_est = slide.get('estimated_time', '')
                    if time_est:
                        st.caption(f"‚è±Ô∏è {time_est}")
    
    def render_progress_indicator(self):
        """Render progress indicator"""
        phase_map = {
            'initial': 0,
            'questions': 50,
            'generation': 80,
            'complete': 100
        }
        
        progress = phase_map.get(st.session_state.generation_phase, 0)
        
        st.markdown(f"""
        <div class="progress-indicator">
            <div class="progress-bar" style="width: {progress}%"></div>
        </div>
        <p style="text-align: center; margin: 0.5rem 0;">
            Ti·∫øn ƒë·ªô: {progress}% - {st.session_state.generation_phase.title()}
        </p>
        """, unsafe_allow_html=True)
    
    def show_presentation_stats(self):
        """Show enhanced presentation statistics"""
        if not st.session_state.presentation_data:
            return
        
        data = st.session_state.presentation_data
        
        with st.expander("üìä Th·ªëng k√™ chi ti·∫øt"):
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                total_slides = len(data.get('slides', []))
                st.metric("Total Slides", total_slides)
            
            with col2:
                images_count = len(data.get('image_suggestions', {}).get('slides_needing_images', []))
                st.metric("Slides v·ªõi ·∫£nh", images_count)
            
            with col3:
                total_content = sum(len(slide.get('content', [])) for slide in data.get('slides', []))
                st.metric("T·ªïng bullet points", total_content)
            
            with col4:
                duration = data.get('estimated_duration', '0')
                st.metric("Th·ªùi gian", duration)
            
            # Generation info
            gen_info = data.get('generation_info', {})
            if gen_info:
                st.markdown("**Th√¥ng tin t·∫°o:**")
                st.json(gen_info)
    
    def reset_interactive_session(self):
        """Reset interactive session"""
        st.session_state.conversation_history = []
        st.session_state.current_questions = []
        st.session_state.user_answers = {}
        st.session_state.generation_phase = 'initial'
        st.session_state.interactive_session = None
        
        if st.session_state.ai_generator:
            st.session_state.ai_generator.current_context = {}
    
    def render_download_section(self):
        """Render enhanced download section"""
        if not st.session_state.presentation_data:
            return
        
        st.subheader("üì• T·∫£i xu·ªëng Presentation")
        
        # Quick Edit button
        if st.button("üé® Edit with Enhanced Editor", type="secondary", use_container_width=True, key="download_section_edit"):
            try:
                enhanced_editor = st.session_state.enhanced_editor
                result = enhanced_editor.start_editing(st.session_state.presentation_data)
                
                if result:
                    st.success("‚úÖ Enhanced Editor ƒë√£ kh·ªüi ƒë·ªông!")
                    st.rerun()
                else:
                    st.error("‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Enhanced Editor")
                    
            except Exception as e:
                st.error(f"‚ùå L·ªói kh·ªüi ƒë·ªông Enhanced Editor: {str(e)}")
        
        st.markdown("---")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üìä T·∫°o PowerPoint", type="primary"):
                try:
                    with st.spinner("üé® ƒêang t·∫°o file PowerPoint..."):
                        # Apply recommended theme if auto-selected
                        theme_info = st.session_state.presentation_data.get('recommended_theme', {})
                        if theme_info.get('auto_selected'):
                            selected_theme = theme_info.get('theme_name', 'education_pro')
                        else:
                            selected_theme = st.session_state.selected_theme
                        
                        # Generate PowerPoint with enhanced features
                        success = st.session_state.pp_generator.create_from_structured_data(
                            st.session_state.presentation_data
                        )
                        
                        if success:
                            pptx_buffer = st.session_state.pp_generator.save_to_buffer()
                        else:
                            pptx_buffer = None
                        
                        if pptx_buffer:
                            filename = f"{st.session_state.presentation_data.get('title', 'presentation')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pptx"
                            
                            st.download_button(
                                label="‚¨áÔ∏è Download PowerPoint",
                                data=pptx_buffer,
                                file_name=filename,
                                mime="application/vnd.openxmlformats-officedocument.presentationml.presentation"
                            )
                        else:
                            st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o file PowerPoint")
                            
                except Exception as e:
                    st.error(f"L·ªói khi t·∫°o PowerPoint: {str(e)}")
        
        with col2:
            if st.button("üìÑ Export JSON"):
                json_data = json.dumps(st.session_state.presentation_data, indent=2, ensure_ascii=False)
                filename = f"{st.session_state.presentation_data.get('title', 'presentation')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                
                st.download_button(
                    label="‚¨áÔ∏è Download JSON",
                    data=json_data,
                    file_name=filename,
                    mime="application/json"
                )
        
        with col3:
            if st.button("üñºÔ∏è Xem ·∫£nh ƒë√£ t·∫°o"):
                self.show_generated_images()
    
    def show_generated_images(self):
        """Show generated images"""
        if not st.session_state.presentation_data:
            return
        
        generated_images = st.session_state.presentation_data.get('generated_images', {})
        
        if generated_images:
            st.subheader("üñºÔ∏è H√¨nh ·∫£nh ƒë√£ t·∫°o")
            
            for slide_index, image_path in generated_images.items():
                slide = st.session_state.presentation_data['slides'][slide_index]
                st.markdown(f"**Slide {slide_index + 1}: {slide.get('title', '')}**")
                
                try:
                    from PIL import Image
                    image = Image.open(image_path)
                    st.image(image, caption=f"·∫¢nh cho slide {slide_index + 1}", width=300)
                except Exception as e:
                    st.error(f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã ·∫£nh: {str(e)}")
        else:
            st.info("Ch∆∞a c√≥ ·∫£nh n√†o ƒë∆∞·ª£c t·∫°o")
    
    def run(self):
        """Run the enhanced application"""
        # Check if Enhanced Editor is in edit mode FIRST
        enhanced_editor = st.session_state.enhanced_editor
        
        if enhanced_editor.is_in_edit_mode():
            # Show exit button
            if st.button("üîô Quay l·∫°i AI Generator", type="secondary", key="main_exit_editor"):
                enhanced_editor.exit_edit_mode()
                st.rerun()
            
            # Render Enhanced Editor
            try:
                enhanced_editor.render_editor_interface()
                return  # Exit early if in edit mode
            except Exception as e:
                st.error(f"‚ùå L·ªói Enhanced Editor: {str(e)}")
                st.code(traceback.format_exc())
                enhanced_editor.exit_edit_mode()
        
        self.setup_sidebar()
        self.render_header()
        
        # Main tabs
        tab1, tab2, tab3, tab4, tab5 = st.tabs(["üí¨ Chat AI", "üìã Preview", "üé® Customize", "üé® Editor", "üì• Download"])
        
        with tab1:
            self.render_interactive_chat_interface()
        
        with tab2:
            self.render_enhanced_presentation_preview()
        
        with tab3:
            if st.session_state.presentation_data:
                st.subheader("üé® T√πy ch·ªânh Presentation")
                
                # Theme customization
                st.markdown("#### Ch·ªçn Theme")
                available_themes = self.theme_system.list_available_themes()
                
                cols = st.columns(3)
                for i, (theme_key, theme_name) in enumerate(available_themes.items()):
                    with cols[i % 3]:
                        if st.button(f"üé® {theme_name}", key=f"theme_{theme_key}"):
                            st.session_state.selected_theme = theme_key
                            st.success(f"ƒê√£ ch·ªçn theme: {theme_name}")
                
                # Content editing (placeholder for future enhancement)
                st.markdown("#### Ch·ªânh s·ª≠a n·ªôi dung")
                st.info("T√≠nh nƒÉng ch·ªânh s·ª≠a n·ªôi dung s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo")
            else:
                st.info("Ch∆∞a c√≥ presentation ƒë·ªÉ t√πy ch·ªânh")
        
        with tab4:
            # Enhanced PowerPoint Editor Tab
            if st.session_state.presentation_data:
                st.subheader("üé® Enhanced PowerPoint Editor")
                st.markdown("### Ch·ªânh s·ª≠a presentation v·ªõi giao di·ªán nh∆∞ PowerPoint th·∫≠t!")
                
                # Editor info
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.markdown("""
                    **‚ú® T√≠nh nƒÉng Enhanced Editor:**
                    - üåà **5 Theme system ƒë·∫πp** v·ªõi gradient chuy√™n nghi·ªáp
                    - üé® **Fabric.js editor** drag & drop nh∆∞ PowerPoint
                    - ‚å®Ô∏è **Keyboard shortcuts** (Ctrl+C/V, Delete)
                    - üìù **Text editing** v·ªõi font, color, size
                    - üî∑ **Shapes & Images** v·ªõi hi·ªáu ·ª©ng ƒë·∫πp
                    - üíæ **Export PPTX** tr·ª±c ti·∫øp
                    """)
                
                with col2:
                    # Quick stats
                    data = st.session_state.presentation_data
                    st.metric("üìÑ Slides", len(data.get('slides', [])))
                    st.metric("üé® Theme", data.get('theme_hint', 'Default'))
                
                # Launch Enhanced Editor button
                st.markdown("---")
                
                col1, col2, col3 = st.columns([1, 2, 1])
                with col2:
                    if st.button("üöÄ Launch Enhanced Editor", type="primary", use_container_width=True, key="editor_tab_launch"):
                        with st.spinner("üé® ƒêang kh·ªüi ƒë·ªông Enhanced Editor..."):
                            try:
                                enhanced_editor = st.session_state.enhanced_editor
                                result = enhanced_editor.start_editing(st.session_state.presentation_data)
                                
                                if result:
                                    st.success("‚úÖ Enhanced Editor ƒë√£ kh·ªüi ƒë·ªông!")
                                    st.rerun()
                                else:
                                    st.error("‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Enhanced Editor")
                                    
                            except Exception as e:
                                st.error(f"‚ùå L·ªói kh·ªüi ƒë·ªông Enhanced Editor: {str(e)}")
                                st.code(traceback.format_exc())
                
                # Quick preview
                st.markdown("---")
                with st.expander("üëÄ Preview Presentation Data", expanded=False):
                    st.json(st.session_state.presentation_data)
                    
            else:
                st.info("ü§ñ Vui l√≤ng t·∫°o presentation v·ªõi AI tr∆∞·ªõc khi s·ª≠ d·ª•ng Enhanced Editor")
                st.markdown("""
                **H∆∞·ªõng d·∫´n:**
                1. V√†o tab **üí¨ Chat AI** 
                2. T·∫°o presentation v·ªõi AI
                3. Quay l·∫°i tab **üé® Editor** n√†y
                4. Click **üöÄ Launch Enhanced Editor**
                """)
        
        with tab5:
            self.render_download_section()

def main():
    """Main function ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng"""
    try:
        app = EnhancedPowerPointApp()
        app.run()
    except Exception as e:
        st.error(f"L·ªói ·ª©ng d·ª•ng: {str(e)}")
        st.error(traceback.format_exc())

if __name__ == "__main__":
    main()